require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/restaurants", type: :request do
  include ActionDispatch::TestProcess::FixtureFile
  # This should return the minimal set of attributes required to create a valid
  # Restaurant. As you add validations to Restaurant, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:restaurant)
  }

  let(:invalid_attributes) {
    valid_attributes.merge({ name: nil })
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # RestaurantsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      Restaurant.create! valid_attributes
      get restaurants_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      restaurant = Restaurant.create! valid_attributes
      get restaurant_url(restaurant), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Restaurant" do
        expect {
          post restaurants_url,
               params: { restaurant: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Restaurant, :count).by(1)
      end

      it "renders a JSON response with the new restaurant" do
        post restaurants_url,
             params: { restaurant: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Restaurant" do
        expect {
          post restaurants_url,
               params: { restaurant: invalid_attributes }, as: :json
        }.to change(Restaurant, :count).by(0)
      end

      it "renders a JSON response with errors for the new restaurant" do
        post restaurants_url,
             params: { restaurant: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "POST /import" do
    context "when no file given" do
      it "responds with a bad request" do
        post import_restaurants_url

        expect(response.status).to eq(400)
        expect(JSON.parse(response.body)["error"]).to eq("No file uploaded")
      end
    end

    context "when unsupported file format given" do
      it "responds with a bad request" do
        post import_restaurants_url, params: { file: file_fixture_upload('text_file.txt', 'text/plain') }

        expect(response.status).to eq(400)
        expect(JSON.parse(response.body)["error"]).to eq("Unsupported file type")
      end
    end

    context "when bad formatted json file given" do
      it "responds with a bad request" do
        post import_restaurants_url, params: { file: file_fixture_upload('invalid_json.json', 'application/json') }

        expect(response.status).to eq(400)
        expect(JSON.parse(response.body)["error"]).to eq("Invalid json")
      end
    end

    context "when import service return an error" do
      it "responds with a bad request" do
        post import_restaurants_url, params: { file: file_fixture_upload('valid_json_without_expect_structure.json', 'application/json') }

        expect(response.status).to eq(400)
        expect(JSON.parse(response.body)["error"]).to eq("Missing restaurants info")
      end
    end

    context "when import service persists data successfuly" do
      it "responds with a success status" do
        post import_restaurants_url, params: { file: file_fixture_upload('restaurant_data.json', 'application/json') }

        expect(response.status).to eq(200)
        expect(JSON.parse(response.body)["error"]).to be_nil
        expect(JSON.parse(response.body)["menu_items_logs"].size).to eq(9)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "Mediterranium",
          address: "Formosa - GO"
        }
      }

      it "updates the requested restaurant" do
        restaurant = Restaurant.create! valid_attributes
        patch restaurant_url(restaurant),
              params: { restaurant: new_attributes }, headers: valid_headers, as: :json
        restaurant.reload
        changed_attributes = restaurant.attributes.slice("name", "address")

        expect(changed_attributes.values).to eq(new_attributes.values)
      end

      it "renders a JSON response with the restaurant" do
        restaurant = Restaurant.create! valid_attributes
        patch restaurant_url(restaurant),
              params: { restaurant: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the restaurant" do
        restaurant = Restaurant.create! valid_attributes
        patch restaurant_url(restaurant),
              params: { restaurant: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested restaurant" do
      restaurant = Restaurant.create! valid_attributes
      expect {
        delete restaurant_url(restaurant), headers: valid_headers, as: :json
      }.to change(Restaurant, :count).by(-1)
    end
  end
end
